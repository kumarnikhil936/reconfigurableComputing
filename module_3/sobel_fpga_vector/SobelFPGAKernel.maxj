package sobel;


import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.OffsetExpr;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFix;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;

public class SobelFPGAKernel extends Kernel {
	SobelFPGAKernel(KernelParameters parameters, int n_pixel) {
		super(parameters);

		int n_p = n_pixel*4;

		/* Value range, input data: 0 <= i <= +255 --> U 2**8  */
		DFEFix channelIOType				= dfeUInt(8);
		DFEFix addIOType				= dfeInt(11);
		DFEFix filtIOType				= dfeUInt(11);
		DFEVectorType<DFEVar> pixelIOType	= new DFEVectorType<DFEVar>(channelIOType, n_p);
		DFEVectorType<DFEVar> vec_addIOType	= new DFEVectorType<DFEVar>(addIOType, n_p);
		DFEVectorType<DFEVar> vec_filtIOType	= new DFEVectorType<DFEVar>(filtIOType, n_p);

		/* Input and output streams */
		DFEVector<DFEVar> inPixel			= io.input("dataIn", pixelIOType);
		DFEVar width 						= io.scalarInput("width", dfeUInt(12));
		DFEVar height 						= io.scalarInput("height", dfeUInt(12));
		OffsetExpr n_w 						= stream.makeOffsetParam("n_w", 0, 4096);
		DFEVector<DFEVar> outPixel			= pixelIOType.newInstance(this);

		/*counter*/
		CounterChain chain = control.count.makeCounterChain();
		DFEVar h_cha = chain.addCounter(height, 1);
		DFEVar w_cha = chain.addCounter(width, n_p/4);

		/*read all required input channels per pixel*/
		DFEVector<DFEVar> inPix_tl = stream.offsetStriped(inPixel, (-n_w-1)*4).cast(vec_addIOType);
		DFEVector<DFEVar> inPix_t = stream.offsetStriped(inPixel, (-n_w*4)).cast(vec_addIOType);
		DFEVector<DFEVar> inPix_tr = stream.offsetStriped(inPixel, (-n_w+1)*4).cast(vec_addIOType);
		DFEVector<DFEVar> inPix_l = stream.offsetStriped(inPixel, -4).cast(vec_addIOType);
		DFEVector<DFEVar> inPix_r = stream.offsetStriped(inPixel, 4).cast(vec_addIOType);
		DFEVector<DFEVar> inPix_bl = stream.offsetStriped(inPixel, (n_w-1)*4).cast(vec_addIOType);
		DFEVector<DFEVar> inPix_b = stream.offsetStriped(inPixel, n_w*4).cast(vec_addIOType);
		DFEVector<DFEVar> inPix_br = stream.offsetStriped(inPixel, (n_w+1)*4).cast(vec_addIOType);

		/*Convolution per filter*/
		DFEVector<DFEVar> filt_x = inPix_tl + inPix_t*2 + inPix_tr - inPix_bl - inPix_b*2 - inPix_br;
		DFEVector<DFEVar> filt_y = inPix_tl - inPix_tr + inPix_l*2 - inPix_r*2 + inPix_bl - inPix_br;

		/*add both filters together*/
		DFEVector<DFEVar> filt_x_con = (filt_x > 0);
		DFEVector<DFEVar> filt_x_abs = filt_x_con ? filt_x : -filt_x;
		DFEVector<DFEVar> filt_y_con = (filt_y > 0);
		DFEVector<DFEVar> filt_y_abs = filt_y_con ? filt_y : -filt_y;
		DFEVector<DFEVar> res = ((filt_x_abs.cast(vec_filtIOType) + filt_y_abs.cast(vec_filtIOType))>>3).cast(pixelIOType);

		/*check border and write out*/
		for (int i=0; i<n_p; i++){
			if (i%4==3){
				outPixel[i] <== inPixel[i];
			} else{

				/* control signals */
				DFEVar w_min_con = ((w_cha > 0) | (i > 3));
				DFEVar w_max_con = ((w_cha*4 + i) < (width*4-4));
				DFEVar h_min_con = (h_cha > 0);
				DFEVar h_max_con = (h_cha < height-1);
				DFEVar con = (w_min_con & w_max_con & h_min_con & h_max_con);

				/*write out correct values*/
				outPixel[i] <== con ? res[i] : 0;
			}
		}
		/* Set output data stream */
		io.output("dataOut", outPixel, pixelIOType);
	}
}
